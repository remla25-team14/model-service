name: Release Model-Service

on:
  push:
    tags:
      - 'v*.*.*'
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read # Read-only for checkout
      packages: write # Required to push to GHCR
      pull-requests: read # Optional: for context access

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          # Fetch all history for all branches and tags
          fetch-depth: 0

      - name: Set up QEMU (for multi-platform builds)
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build (PR only)
        # This step runs only for pull requests. It builds the image but doesn't push it,
        # acting as a validation step. 'load: true' makes the image available to subsequent steps if needed.
        if: github.event_name == 'pull_request'
        uses: docker/build-push-action@v5
        with:
          context: .
          load: true

      - name: Build and push (tags or manual)
        # This step runs for tag pushes or manual triggers, not for pull requests.
        # It builds for multiple platforms and pushes the images to GHCR with two tags:
        # one for the specific version and one for 'latest'.
        if: github.event_name != 'pull_request'
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/model-service:${{ github.ref_name }}
            ghcr.io/${{ github.repository_owner }}/model-service:latest
          # Use GitHub Actions cache for faster builds
          cache-from: type=gha
          cache-to: type=gha,mode=max

  create-release-and-bump:
    # This job only runs when a tag is pushed. github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    needs: build-and-push
    runs-on: ubuntu-latest
    permissions:
      # Permissions needed to create releases, commit files, and create pull requests.
      contents: write
      pull-requests: write

    steps:
      - name: Checkout repository
        # IMPORTANT: Checkout the main branch directly to avoid detached HEAD state.
        uses: actions/checkout@v4
        with:
          ref: 'main' # Checkout the main branch, not the tag
          fetch-depth: 0

      - name: Create GitHub Release (stable)
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false
        env:
          # The GITHUB_TOKEN is automatically provided by GitHub Actions
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Determine next prerelease version
        id: next_prerelease
        run: |
          # Strip the 'v' prefix from the tag (e.g., 'v0.1.4' -> '0.1.4')
          version=${GITHUB_REF#refs/tags/v}
          # Calculate the next base version (e.g., '0.1.4' -> '0.1.5')
          base_version=$(echo "$version" | awk -F. '{printf "%d.%d.%d", $1, $2, $3+1}')
          
          # Find the latest existing pre-release tag for this base version by listing, sorting, and taking the last one.
          latest_prerelease_tag=$(git tag --list "v${base_version}-rc.*" | sort -V | tail -n 1)
          
          rc_number=1
          if [[ -n "$latest_prerelease_tag" ]]; then
            # If a pre-release tag exists, extract the 'rc' number and increment it.
            # Example: 'v0.1.5-rc.2' -> '2' -> rc_number becomes 3.
            latest_rc_number=$(echo "$latest_prerelease_tag" | grep -oP 'rc\.\K\d+')
            rc_number=$((latest_rc_number + 1))
          fi
          
          # Construct the new prerelease version string (e.g., v0.1.5-rc.3)
          next="v${base_version}-rc.${rc_number}"
          echo "next_release=$next" >> $GITHUB_OUTPUT

      - name: Bump version in metadata
        run: |
          # Write the new prerelease version to a VERSION file
          echo "${{ steps.next_prerelease.outputs.next_release }}" > VERSION
          
          # Configure git with bot credentials
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          # IMPORTANT: Add the new VERSION file to the staging area
          git add VERSION
          
          # Commit the change
          git commit -m "chore: bump to prerelease ${{ steps.next_prerelease.outputs.next_release }}"
          
          # Tag the new commit with the prerelease version
          git tag ${{ steps.next_prerelease.outputs.next_release }}
          
          # Push the commit and the new tag to the main branch
          git push origin HEAD:main --follow-tags

      - name: Create prerelease GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.next_prerelease.outputs.next_release }}
          name: Pre-release ${{ steps.next_prerelease.outputs.next_release }}
          draft: false
          prerelease: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}